theme_classic() +
labs(x = "", y = "Mean \nEmotionality \nDifference", color = "Assignment") +
theme(axis.title.y = element_text(angle=0))
###statistics
emo_join <- left_join(emo_differences, emo_differences_soft, by = "n")
emo_join[, compare := 0]
emo_join[diff.x < diff.y , compare := 1]
emo_join[, .(mean = mean(compare))]
emo_join[, .(mean = mean(compare)), by = .(n)] #what percentage of simulated runs is the random below the software
load("effect sizes + circular logic.RData")
mem_plot
View(mem_plot)
rm(list = ls()) # clear environment
library(lme4)
library(lmerTest)
library(tidyverse)
library(data.table) # used extensively for data cleaning and analysis
library(dtplyr)
library(effsize)
library(pwr)
library(Rmisc)
library(car)
library(esquisse)
library(ggpubr)
retrieval = read.csv("clean_scripts/Extra_retrieval.csv")
retrieval <- as.data.table(retrieval)
retrieval[, HR := mean(correct), by = participant] # hit rate by participant
retrieval[, avg_mem := correct - HR, by = participant] # participant-corrected hit rate
random = retrieval[condition == "random"]
software = retrieval[condition == "software"]
# useful for grabbing specific number of stimuli later
tmp_software <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
tmp_software <- separate(data = tmp_software,
col = number, sep = ".jpg",
into = c("number", "jpg"))
# get avg correct/accuracy rates by participant
all_HR <- retrieval[,.(mean = mean(correct)),
by = .(condition, participant, old_object_condition)]
# RANDOM condition 3 vs 1 exposures (paired Cohen's D)
all_cohensd_random_HR = cohen.d(
all_HR[condition == "random" & old_object_condition == 3]$mean,
all_HR[condition == "random" & old_object_condition == 1]$mean,
paired = T) # 0.94
# SOFTWARE condition 3 vs 1 exposures (paired Cohen's D)
all_cohensd_software_HR = cohen.d(
all_HR[condition == "software" & old_object_condition == 3]$mean,
all_HR[condition == "software" & old_object_condition == 1]$mean,
paired = T) # 0.86
# compare 1 vs 3 exposures
all_ANOVA = aov(correct ~ condition * old_object_condition,
data = retrieval[old_object_condition %in% c(1,3)])
# different ways of examining output
summary(all_ANOVA)
model.tables(all_ANOVA, type = "means", se = T)
TukeyHSD(all_ANOVA, which = "old_object_condition")
# the stimuli-per-group you're interested in looking at
n_stim_list = seq(1,80,1)
# create a table to populate; for both random and software
plot_ef <- data.frame(matrix(ncol = 5,
nrow = length(n_stim_list)*2))
colnames(plot_ef) <- c("stimpergroup","mean","group","CI_upper","CI_lower")
plot_ef$stimpergroup <- rep(n_stim_list, each=2)
plot_ef$group <- rep(c("Random","Software"))
load("plot_ef.RData") # pre-simulated results
load("clean_scripts/plot_ef.RData") # pre-simulated results
ef_graph <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_line() +
ylab("effect size") +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7)
ef_graph
plot_ef = read.csv("plotef_full.csv")
plot_ef = read.csv("clean_scripts/plotef_full.csv")
ef_graph <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_line() +
ylab("effect size") +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7)
ef_graph
# Calculate average % increase in effect size across the numbers we have
# NOTE: 1 and 2 aren't working since uneven numbers of images for 1 and 2
mean((plot_ef[plot_ef$stimpergroup > 2 & plot_ef$group == "Software", "mean"] - plot_ef[plot_ef$stimpergroup > 2 & plot_ef$group == "Random", "mean"] ) * 100) # 52.5883
?geom_smooth
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(method="loess") +
ylab("effect size") +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x)) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(method = "log", formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
# range of effect sizes
d <- seq(.1,2.1,.01)
nd <- length(d)
# power values
p <- seq(.4,.9,.1)
np <- length(p)
# obtain sample sizes
samsize <- array(numeric(nn*np), dim=c(nd,np))
for (i in 1:np){
for (j in 1:nd){
result <- pwr.t.test(n = NULL, d = d[j],
sig.level = .05, power = p[i],
type = "paired")
samsize[j,i] <- ceiling(result$n)
}
}
# set up graph
xrange <- range(d)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n",
xlab="Effect Size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
abline(h=0, v=plot_ef[group == "Software" & stimpergroup ==80]$mean, lty=3, col="#674AEE")
abline(h=0, v=plot_ef[group == "Random" & stimpergroup ==80]$mean, lty=3, col="#6AA84F")
# range of effect sizes
d <- seq(.1,2.1,.01)
nd <- length(d)
# power values
p <- seq(.4,.9,.1)
np <- length(p)
library(pwr)
# obtain sample sizes
samsize <- array(numeric(nn*np), dim=c(nd,np))
for (i in 1:np){
for (j in 1:nd){
result <- pwr.t.test(n = NULL, d = d[j],
sig.level = .05, power = p[i],
type = "paired")
samsize[j,i] <- ceiling(result$n)
}
}
# obtain sample sizes
samsize <- array(numeric(nd*np), dim=c(nd,np))
for (i in 1:np){
for (j in 1:nd){
result <- pwr.t.test(n = NULL, d = d[j],
sig.level = .05, power = p[i],
type = "paired")
samsize[j,i] <- ceiling(result$n)
}
}
# set up graph
xrange <- range(d)
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, yrange, type="n",
xlab="Effect Size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
abline(h=0, v=plot_ef[group == "Software" & stimpergroup ==80]$mean, lty=3, col="#674AEE")
abline(h=0, v=plot_ef[group == "Random" & stimpergroup ==80]$mean, lty=3, col="#6AA84F")
View(plot_ef)
plot_ef[group == "Software" & stimpergroup ==80]
library(data.table) # used extensively for data cleaning and analysis
abline(h=0, v=plot_ef[group == "Software" & stimpergroup ==80]$mean, lty=3, col="#674AEE")
plot_ef as.data.table(plot_ef)
plot_ef = as.data.table(plot_ef)
abline(h=0, v=plot_ef[group == "Software" & stimpergroup ==80]$mean, lty=3, col="#674AEE")
abline(h=0, v=plot_ef[group == "Random" & stimpergroup ==80]$mean, lty=3, col="#6AA84F")
abline(h=0, v=plot_ef[group == "Software" & stimpergroup ==80]$mean, lty=5, col="#674AEE")
abline(h=0, v=plot_ef[group == "Random" & stimpergroup ==80]$mean, lty=5, col="#6AA84F")
effsize_plotpower = plot(xrange, yrange, type="n",
xlab="Effect Size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
p + lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
p
plot(xrange, yrange, type="n",
xlab="Effect Size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
abline(h=0, v=plot_ef[group == "Software" & stimpergroup ==80]$mean, lty=5, col="#674AEE")
abline(h=0, v=plot_ef[group == "Random" & stimpergroup ==80]$mean, lty=5, col="#6AA84F")
?theme
theme_minimal()
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
)
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
) +
scale_color_manual(colors = c("#6AA84F", "#674AEE"))
ef_graph1
?colors
scale_color_manual
?scale_color_manual
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = c("#6AA84F", "#674AEE"))
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = c("#6AA84F", "#674AEE")) +
scale_fill_manual(values = c("#6AA84F", "#674AEE"))
ef_graph1
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group, fill=group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = c("#6AA84F", "#674AEE")) +
scale_fill_manual(values = c("#6AA84F", "#674AEE"))
ef_graph1
Effect_Sizes <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group)) +
geom_line() +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7, color = "black") +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
theme_classic() +
labs(x = "Number of Stimuli Per Group", y = "Effect Size", color = "Group")
Effect_Sizes
ef_graph1 <- ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group, fill=group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = c("#6AA84F", "#674AEE")) +
scale_fill_manual(values = c("#6AA84F", "#674AEE"))
ggplot(plot_ef, aes(x = stimpergroup, y = mean, color = group, fill=group)) +
geom_smooth(formula = y ~ log(x), stat="smooth", se=T) +
ylab("effect size") +
# geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7) +
theme(
panel.background = element_rect(fill="transparent"),
plot.background = element_rect(fill="transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill="transparent"),
legend.box.background = element_rect(fill = "transparent")
) +
scale_color_manual(values = c("#6AA84F", "#674AEE")) +
scale_fill_manual(values = c("#6AA84F", "#674AEE"))
shoe_plot <- combined_shoe %>%
filter(humanmade_response %in% c("human-made", "natural") | is.na(humanmade_response)) %>%
filter(outdoors_response %in% c("outdoors", "indoors") | is.na(outdoors_response)) %>%
ggplot() +
aes(x = agreement, fill = group, colour = group) +
geom_density(adjust = 0.4, alpha = .4) +
scale_fill_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
labs(x = "Shoebox Score Agreement", y = "Frequency", fill = "Assignment", color = "Assignment") +
theme_classic()
retrieval_full <- read.csv("clean_extra_retrieval_full.csv") # currently in the cleaned folder
retrieval_full <- read.csv("clean_scripts/extra_retrieval_full.csv") # currently in the cleaned folder
app_values_soft = read.csv("experiment_stimuli/summary.csv")
load("effect sizes + circular logic.RData")
soft_diff_fun
emo_plot
emo_differences$group = "Random"
setDT(emo_differences)
emo_differences_group = emo_differences[, .(diff = mean(diff), CI_upper = CI(diff)[[1]], CI_lower= CI(diff)[[3]]), by = .(n, group)]
emo_differences_soft$group = "Software"
plot_emo = rbind(emo_differences_group, emo_differences_soft, fill = TRUE)
emo_plot <- ggplot(plot_emo, aes(x = n, y = diff, color = group)) +
geom_line() +
geom_errorbar(aes(ymin=CI_lower, ymax=CI_upper), width = .7, color = "black") +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
theme_classic() +
labs(x = "", y = "Mean \nEmotionality \nDifference", color = "Assignment") +
theme(axis.title.y = element_text(angle=0))
###statistics
emo_join <- left_join(emo_differences, emo_differences_soft, by = "n")
emo_join[, compare := 0]
emo_join[diff.x < diff.y , compare := 1]
emo_join[, .(mean = mean(compare))]
emo_join[, .(mean = mean(compare)), by = .(n)] #what percentage of simulated runs is the random below the software
```
plot_emo
emo_plot
shoe_plot <- combined_shoe %>%
filter(humanmade_response %in% c("human-made", "natural") | is.na(humanmade_response)) %>%
filter(outdoors_response %in% c("outdoors", "indoors") | is.na(outdoors_response)) %>%
ggplot() +
aes(x = agreement, fill = group, colour = group) +
geom_density(adjust = 0.4, alpha = .4) +
scale_fill_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
labs(x = "Shoebox Score Agreement", y = "Frequency", fill = "Assignment", color = "Assignment") +
theme_classic()
human_plot <- combined_human %>%
ggplot() +
aes(x = agreement, fill = group, colour = group) +
geom_density(adjust = 0.4, alpha = .4) +
scale_fill_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
labs(x = "Human-made Score Agreement", y = "", fill = "Assignment", color = "Assignment") +
theme_classic()
outdoors_plot <- combined_outdoors %>%
ggplot() +
aes(x = agreement, fill = group, colour = group) +
geom_density(adjust = 0.4, alpha = .4) +
scale_fill_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
labs(x = "Indoor/Outdoor Score Agreement", y = "Frequency", fill = "Assignment", color = "Assignment") +
theme_classic()
name_plot <- combined_name_20 %>%
ggplot() +
aes(x = h_index, fill = group, colour = group) +
geom_density(adjust = 0.4, alpha = .4) +
scale_fill_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
scale_color_manual(
values = c("#F6B254","#674AEE"), labels = c("Random", "Software")
) +
labs(x = "H-Index", y = "", fill = "Assignment", color = "Assignment") +
theme_classic()
agreement <- ggarrange(shoe_plot,human_plot, outdoors_plot, name_plot, nrow = 2, ncol = 2, common.legend = TRUE, labels = c("A","B","C", "D"))
agreement
# RANDOM condition 3 vs 1 exposures (paired Cohen's D)
all_cohensd_random_HR = cohen.d(
all_HR[condition == "random" & old_object_condition == 3]$mean,
all_HR[condition == "random" & old_object_condition == 1]$mean,
paired = T) # 0.94
# SOFTWARE condition 3 vs 1 exposures (paired Cohen's D)
all_cohensd_software_HR = cohen.d(
all_HR[condition == "software" & old_object_condition == 3]$mean,
all_HR[condition == "software" & old_object_condition == 1]$mean,
paired = T) # 0.86
all_cohensd_random_HR
all_cohensd_software_HR
# compare 1 vs 3 exposures
all_ANOVA = aov(correct ~ condition * old_object_condition,
data = retrieval[old_object_condition %in% c(1,3)])
# different ways of examining output
summary(all_ANOVA)
model.tables(all_ANOVA, type = "means", se = T)
TukeyHSD(all_ANOVA, which = "old_object_condition")
plot_ef[group == "Software" & stimpergroup ==20]$mean
plot_ef[group == "Random" & stimpergroup ==20]$mean
yrange
plot(xrange, c(0,200), type="n",
xlab="Effect Size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
?pwr.t.test
# obtain sample sizes
samsize <- array(numeric(nd*np), dim=c(nd,np))
for (i in 1:np){
for (j in 1:nd){
result <- pwr.t.test(n = NULL, d = d[j],
sig.level = .05, power = p[i],
type = "two.sample",)
samsize[j,i] <- ceiling(result$n)
}
}
yrange <- round(range(samsize))
colors <- rainbow(length(p))
plot(xrange, c(0,200), type="n",
xlab="Effect Size (d)",
ylab="Sample Size (n)" )
# add power curves
for (i in 1:np){
lines(d, samsize[,i], type="l", lwd=2, col=colors[i])
}
