colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","pred_cor2","cond")
# ef2=as.data.frame(matrix(nrow=n_iter*nrow(HR_sub)*length(stimpergroup),ncol=5))
# colnames(ef2) <- c("iteration","stimpergroup","participant","stimulus","pred_cor")
#
# eflist = list()
#
# stim1index = 0
# stim2index = 0
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = mean(HR_sub), # should only be one value?
odds_sub = prob_sub / (1 - prob_sub),
prob_sub2 = mean(HR_sub2),
odds_sub2 = prob_sub2 / (1 - prob_sub2)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
los2 = (log(odds_stim) + log(odds_sub2)/2),
odds = exp(los),
odds2 = exp(los2),
prob = odds/(1+odds),
prob2 = odds2/(1+odds2),
pred_cor = rbinom(1, 1, prob = prob),
pred_cor2 = rbinom(1, 1, prob = prob2))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor, pred_cor2)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
w_stim_var = sim_SPC_iter(n_iter = 5)
stimvartable = ef[, .(cond1_mean = mean(pred_cor), cond2_mean = mean(pred_cor2)), by = .(iteration, participant, stimpergroup, cond)]
names(ef)
names(tmp)
names(tmp1)
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor, pred_cor2)) %>%
mutate(iteration = h,
stimpergroup = i)
names(tmp1)
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=7))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","pred_cor2","cond")
# ef2=as.data.frame(matrix(nrow=n_iter*nrow(HR_sub)*length(stimpergroup),ncol=5))
# colnames(ef2) <- c("iteration","stimpergroup","participant","stimulus","pred_cor")
#
# eflist = list()
#
# stim1index = 0
# stim2index = 0
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = mean(HR_sub), # should only be one value?
odds_sub = prob_sub / (1 - prob_sub),
prob_sub2 = mean(HR_sub2),
odds_sub2 = prob_sub2 / (1 - prob_sub2)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
los2 = (log(odds_stim) + log(odds_sub2)/2),
odds = exp(los),
odds2 = exp(los2),
prob = odds/(1+odds),
prob2 = odds2/(1+odds2),
pred_cor = rbinom(1, 1, prob = prob),
pred_cor2 = rbinom(1, 1, prob = prob2))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor, pred_cor2)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
w_stim_var = sim_SPC_iter(n_iter = 2)
names(tmp1)
names(ef)
ef=as.data.frame(matrix(nrow=0,ncol=7))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","pred_cor2","cond")
names(ef)
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=7))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","pred_cor2","cond")
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = mean(HR_sub), # should only be one value?
odds_sub = prob_sub / (1 - prob_sub),
prob_sub2 = mean(HR_sub2),
odds_sub2 = prob_sub2 / (1 - prob_sub2)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
los2 = (log(odds_stim) + log(odds_sub2)/2),
odds = exp(los),
odds2 = exp(los2),
prob = odds/(1+odds),
prob2 = odds2/(1+odds2),
pred_cor = rbinom(1, 1, prob = prob),
pred_cor2 = rbinom(1, 1, prob = prob2))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor, pred_cor2)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
w_stim_var = sim_SPC_iter(n_iter = 2)
stimvartable = ef[, .(cond1_mean = mean(pred_cor), cond2_mean = mean(pred_cor2)), by = .(iteration, participant, stimpergroup, cond)]
stimvartable = w_stim_var[, .(cond1_mean = mean(pred_cor), cond2_mean = mean(pred_cor2)), by = .(iteration, participant, stimpergroup, cond)]
cohensdtestrun = as.data.frame(matrix(ncol=11))
colnames(cohensdtestrun) <- c(stimpergroup)
cohensdtestrun[,1]= cohen.d(stimvartable[stimpergroup == 1]$cond1_mean, stimvartable[stimpergroup == 1]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,2]= cohen.d(stimvartable[stimpergroup == 6]$cond1_mean, stimvartable[stimpergroup == 6]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,3]= cohen.d(stimvartable[stimpergroup == 11]$cond1_mean, stimvartable[stimpergroup == 11]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,4]= cohen.d(stimvartable[stimpergroup == 16]$cond1_mean, stimvartable[stimpergroup == 16]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,5]= cohen.d(stimvartable[stimpergroup == 21]$cond1_mean, stimvartable[stimpergroup == 21]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,6]= cohen.d(stimvartable[stimpergroup == 26]$cond1_mean, stimvartable[stimpergroup == 26]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,7]= cohen.d(stimvartable[stimpergroup == 31]$cond1_mean, stimvartable[stimpergroup == 31]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,8]= cohen.d(stimvartable[stimpergroup == 36]$cond1_mean, stimvartable[stimpergroup == 36]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,9]= cohen.d(stimvartable[stimpergroup == 41]$cond1_mean, stimvartable[stimpergroup == 41]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,10]= cohen.d(stimvartable[stimpergroup == 46]$cond1_mean, stimvartable[stimpergroup == 46]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,11]= cohen.d(stimvartable[stimpergroup == 51]$cond1_mean, stimvartable[stimpergroup == 51]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun
View(stimvartable)
View(w_stim_var)
mean(w_stim_var[stimpergroup == 16 & cond == 1,]$pred_cor)
mean(w_stim_var[stimpergroup == 16 & cond == 1,]$pred_cor2)
mean(w_stim_var[stimpergroup == 16 & cond == 2,]$pred_cor2)
mean(w_stim_var[stimpergroup == 16 & cond == 2,]$pred_cor)
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=7))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","cond")
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = case_when(cond == 1 ~ mean(HR_sub)
cond == 2 ~ mean(HR_sub2)),# should only be one value?
odds_sub = prob_sub / (1 - prob_sub)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
odds = exp(los),
prob = odds/(1+odds),
pred_cor = rbinom(1, 1, prob = prob))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
w_stim_var = sim_SPC_iter(n_iter = 2)
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=7))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","cond")
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = case_when(cond == 1 ~ mean(HR_sub)
cond == 2 ~ mean(HR_sub2)),# should only be one value?
odds_sub = prob_sub / (1 - prob_sub)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
odds = exp(los),
prob = odds/(1+odds),
pred_cor = rbinom(1, 1, prob = prob))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
ef=as.data.frame(matrix(nrow=0,ncol=6))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","cond")
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=6))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","cond")
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = case_when(cond == 1 ~ mean(HR_sub)
cond == 2 ~ mean(HR_sub2)),# should only be one value?
odds_sub = prob_sub / (1 - prob_sub)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
odds = exp(los),
prob = odds/(1+odds),
pred_cor = rbinom(1, 1, prob = prob))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
w_stim_var = sim_SPC_iter(n_iter = 2)
View(w_stim_var)
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=6))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","cond")
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = case_when(cond == 1 ~ mean(HR_sub)
cond == 2 ~ mean(HR_sub2)),# should only be one value?
odds_sub = prob_sub / (1 - prob_sub)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
odds = exp(los),
prob = odds/(1+odds),
pred_cor = rbinom(1, 1, prob = prob))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = case_when(cond == 1 ~ mean(HR_sub),
cond == 2 ~ mean(HR_sub2)),# should only be one value?
odds_sub = prob_sub / (1 - prob_sub)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
odds = exp(los),
prob = odds/(1+odds),
pred_cor = rbinom(1, 1, prob = prob))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
sim_SPC_iter <- function (n_iter = 5) { #input how many iterations to run
ef=as.data.frame(matrix(nrow=0,ncol=6))
colnames(ef) <- c("iteration","stimpergroup","participant","stimulus","pred_cor","cond")
for (h in c(1:n_iter)){
print(paste("iteration:", h))
for (i in stimpergroup){
cond1_stim = sample(HR_stim$stimulus, size = i, replace = F) # sample each stimulus i times with replacement
cond2_stim = sample(HR_stim[!HR_stim$stimulus %in% cond1_stim,]$stimulus, size = i, replace = F)
# create dataframe with both the HR_stim$HR and HR_sub$HR, called df here, but can replace
tmp = data %>%
# label condition + only grab relevant stimuli
mutate(cond = case_when(stimulus %in% cond1_stim ~ 1,
stimulus %in% cond2_stim ~ 2)) %>%
filter(!is.na(cond)) %>%
# get prob and odds by stimulus
group_by(stimulus, cond) %>%
mutate(prob_stim = mean(HR_stim), # should only be one value
odds_stim = prob_stim / (1 - prob_stim)) %>%
# get prob and odds by participant
group_by(participant, cond) %>%
mutate(prob_sub = case_when(cond == 1 ~ mean(HR_sub),
cond == 2 ~ mean(HR_sub2)),# should only be one value?
odds_sub = prob_sub / (1 - prob_sub)) %>%
# get odds and prob for all stimuli-participant combos, and the predicted correct
group_by(participant, stimulus, cond) %>%
mutate(los = (log(odds_stim) + log(odds_sub))/2,
odds = exp(los),
prob = odds/(1+odds),
pred_cor = rbinom(1, 1, prob = prob))
# grab the columns you want
tmp1 <- tmp %>%
select(c(participant, stimulus, cond, pred_cor)) %>%
mutate(iteration = h,
stimpergroup = i)
ef <- rbind(ef, tmp1)
# then rbind to the big dataframe
}
}
return(ef)
}
w_stim_var = sim_SPC_iter(n_iter = 2)
View(w_stim_var)
mean(w_stim_var[cond == 1 & stimpergroup == 36,]$pred_cor)
mean(w_stim_var[cond == 2 & stimpergroup == 36,]$pred_cor)
data[, HR_stim := mean(correct), by = stimulus]
data[HR_stim >= 1]$HR_stim <- .999
data[, HR_sub := mean(correct), by = participant]
data[HR_sub >= 1]$HR_sub <- .999
data[, HR_sub2 := HR_sub - rnorm(1, mean = .1, sd = .1)]
data[HR_sub2 >= 1]$HR_sub2 <- .999
data = setDT(data)
w_stim_var = sim_SPC_iter(n_iter = 2)
stimvartable = w_stim_var[, .(cond1_mean = mean(pred_cor), cond2_mean = mean()), by = .(iteration, participant, stimpergroup, cond)]
mean(w_stim_var[cond == 2 & stimpergroup == 36,]$pred_cor)
mean(w_stim_var[cond == 1 & stimpergroup == 36,]$pred_cor)
stimvartable = w_stim_var[, .(mean = mean(pred_cor)), by = .(iteration, participant, stimpergroup, cond)]
View(stimvartable)
stimvartable %>%
pivot_wider(names_from = cond, values_from = mean)
stimvartable = stimvartable %>%
pivot_wider(names_from = cond, values_from = mean)
stimvartable$cond1_mean = stimvartable$`1`
stimvartable$cond2_mean = stimvartable$`2`
cohensdtestrun = as.data.frame(matrix(ncol=11))
colnames(cohensdtestrun) <- c(stimpergroup)
cohensdtestrun[,1]= cohen.d(stimvartable[stimpergroup == 1]$cond1_mean, stimvartable[stimpergroup == 1]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun[,2]= cohen.d(stimvartable[stimpergroup == 6]$cond1_mean, stimvartable[stimpergroup == 6]$cond2_mean, paired = T, na.rm = T)$estimate
cohensdtestrun = as.data.frame(matrix(ncol=11))
colnames(cohensdtestrun) <- c(stimpergroup)
View(stimvartable)
stimvartable = w_stim_var[cond==1, .(cond1_mean= mean(pred_cor)), by = .(iteration, participant, stimpergroup)][
cond==2, .(cond2_mean= mean(pred_cor)), by = .(iteration, participant, stimpergroup)
]
stimvartable = w_stim_var[cond==1, .(cond1_mean= mean(pred_cor)), by = .(iteration, participant, stimpergroup,cond)][
cond==2, .(cond2_mean= mean(pred_cor)), by = .(iteration, participant, stimpergroup)]
stimvartable = w_stim_var[cond==1, cond1_mean := mean(pred_cor), by = .(iteration, participant, stimpergroup)][
cond==2, .(cond2_mean= mean(pred_cor)), by = .(iteration, participant, stimpergroup)]
View(stimvartable)
stimvartable = w_stim_var[cond==1, cond1_mean := mean(pred_cor), by = .(iteration, participant, stimpergroup)][
cond==2, cond2_mean := mean(pred_cor), by = .(iteration, participant, stimpergroup)]
stimvartable = stimvartable[, .(cond1_mean, cond2_mean), by=.(iteration, participant, stimpergroup)]
stimvartable = stimvartable[, .(cond1_mean, cond2_mean, iteration, participant, stimpergroup)]
#load data
library(tidyverse); library(data.table); library(dtplyr); library(effsize); library(ggplot2)
setwd("~/Desktop/ObjectProject")
data = setDT(read.csv("data.csv"))
data = data[trialcode == "old_objects"]
data_corrected = setDT(read.csv("data_corrected.csv"))
data_corrected = data_corrected[trialcode == "old_objects"]
#create a vector with each individual subject and their hit rate
HR_sub = data[, .(HR = mean(correct)), by = participant]
HR_sub = sample_n(as.data.frame(HR_sub), 20, replace = F)
HR_sub$HR_2 = (HR_sub$HR - rnorm(1, mean = .1, sd = .1)) #condition 2 is 1 sd lower than cond 1
HR_sub$HR_2[HR_sub$HR_2>=1] <- .999 #hit rate can't be above 1
HR_sub = setDT(HR_sub)
#create a vector with each individual stimulus and their hit rate
HR_stim = data[, .(HR = mean(correct)), by = stimulus]
stimpergroup = seq(1,51,5)
data[, HR_stim := mean(correct), by = stimulus]
data[HR_stim >= 1]$HR_stim <- .999
data[, HR_sub := mean(correct), by = participant]
data[HR_sub >= 1]$HR_sub <- .999
data[, HR_sub2 := HR_sub - rnorm(1, mean = .1, sd = .1)]
data[HR_sub2 >= 1]$HR_sub2 <- .999
data = setDT(data)
View(data$HR_stim)
View(HR_sub)
View(HR_stim)
combined =
crossing(HR_stim, HR_sub)
#create a vector with each individual subject and their hit rate
HR_sub = data[, .(HR_sub = mean(correct)), by = participant]
HR_sub = sample_n(as.data.frame(HR_sub), 20, replace = F)
HR_sub$HR_2 = (HR_sub$HR_sub - rnorm(1, mean = .1, sd = .1)) #condition 2 is 1 sd lower than cond 1
HR_sub$HR_2[HR_sub$HR_2>=1] <- .999 #hit rate can't be above 1
HR_sub = setDT(HR_sub)
#create a vector with each individual stimulus and their hit rate
HR_stim = data[, .(HR_stim = mean(correct)), by = stimulus]
combined =
crossing(HR_stim, HR_sub)
View(combined)
unique(combined[participant == 35,])
unique(combined[combined$participant == 35,]$stimulus)
length(unique(combined[combined$participant == 35,]$stimulus))
length(unique(combined[combined$participant == 36,]$stimulus))
