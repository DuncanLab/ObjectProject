View(software_10[batch == 11])
# grab the first 10 items of each software-allocated group
software_10 <- separate(data = retrieval[condition == "software"],
col = stimulus, into = c("letter", "number"), sep=1)[
number %in% c("1.jpg", "2.jpg", "3.jpg", "4.jpg", "5.jpg", "6.jpg", "7.jpg","8.jpg", "9.jpg", "10.jpg") &
old_object_condition %in% c(1,3)]
View(software_10)
View(software_10[batch = 9])
View(software_10[batch == 9])
# grab the first 10 items of each software-allocated group
software_10_old <- separate(data = retrieval[condition == "software"],
col = stimulus, into = c("letter", "number"), sep=1)[
number %in% c("1.jpg", "2.jpg", "3.jpg", "4.jpg", "5.jpg", "6.jpg", "7.jpg","8.jpg", "9.jpg", "10.jpg") &
old_object_condition %in% c(1,3)]
software_10_withnew <- separate(data = retrieval[condition == "software"],
col = stimulus, into = c("letter", "number"), sep=1)[
number %in% c("1.jpg", "2.jpg", "3.jpg", "4.jpg", "5.jpg", "6.jpg", "7.jpg","8.jpg", "9.jpg", "10.jpg") &
old_object_condition %in% c(1,3,".")]
View(software_10_withnew)
View(software_10_withnew[batch == 9])
snip_1_2 = c("Blanket.jpg", "Candy_Chocolate.jpg", "Cake_Wedding.jpg", "Helmet_Construction.jpg","SculptureMetalFish.jpg", "Notebook.jpg", "GasBurner.jpg", "Guitar_Acoustic.jpg", "Toy_BlocksPlastic Colourful.jpg", "TinChristmas.jpg", "Tickets_Blank.jpg",
"Desk_School.jpg", "LeatherPuncherTool.jpg", "Toy_StackingRing.jpg", "Drink_Green.jpg", "Bullet.jpg", "Ashtray_Empty.jpg", "NeedlesAcupuncture.jpg","Beater_Electric.jpg", "Generator.jpg")
snip_3_4 = c("TurkeyDinner.jpg", "Broom_Long.jpg", "Ball_8.jpg", "SkullDeer.jpg", "Shield_Antique.jpg",
"Pajamas.jpg", "Radio_Vintage.jpg","BicycleGear.jpg","Ball_Disco.jpg","Pig.jpg","CookieCutter_Tree.jpg", "Tire_Hollow.jpg", "Lamp_TableWhite.jpg", "LampPost_OneBulb.jpg", "Glass_Martini.jpg","Currants.jpg","SkiPoles.jpg", "CrepeMaker.jpg", "Switch_LightWhite.jpg","Paddle_Beach.jpg")
snip_5_6 = c("Makeup_Compact.jpg", "Ladybug.jpg", "Corkboard.jpg", "Hedgehog.jpg", "Walker_Blue.jpg", "Nuts_Pecan.jpg", "Branch.jpg", "Cannon.jpg", "ManholeCover.jpg","Bowl_Glass.jpg","CoffeeLid.jpg", "Heelpad.jpg","Can_Oblong.jpg","Briefcase_Silver.jpg","Glass_Beer.jpg","Carousel.jpg","Case_Pencil.jpg","TailLight.jpg","IceCream_Popsicle.jpg","Earring_Hoop.jpg")
snip_7_8 = c("WaterCooler.jpg","Ostrich.jpg","ShoeLace_Flat.jpg","Blueberry.jpg","Sphinx.jpg", "Bucket_WoodenLight.jpg","WaterHeater.jpg","Walkman.jpg","Toy_DonkeyFur.jpg","Case_CD.jpg","FuzzyDice.jpg","Bagpipes.jpg","GrillRack.jpg","Stick_IceHockey.jpg","Lips_Wax.jpg","Dice.jpg","Snorkle.jpg","Glasses_Sun.jpg","Toy_Rooster.jpg","Suit_Women.jpg")
random_snippet = random[
(batch %in% c(1,2) & stimulus %in% snip_1_2) |
(batch %in% c(3,4) & stimulus %in% snip_3_4) |
(batch %in% c(5,6) & stimulus %in% snip_5_6) |
(batch %in% c(7,8) & stimulus %in% snip_7_8)]
retrieval[condition=="random" & batch == 1]
View(retrieval[condition=="random" & batch == 1])
View(retrieval[condition=="random" & batch == 1 & old_object_condition %in% c(1,3)])
n = 10
random[, sample_n(), by=.(batch, old_object_condition %in% c(1,3))]
random = retrieval[condition == "random"]
random[, sample_n(), by=.(batch, old_object_condition %in% c(1,3))]
b = 1
ncol(random)
names(random)
SelectRandomStim <- function(n){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample(tmp1$stimulus, n=n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1 & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomSTim
SelectRandomStim
SelectRandomStim(10)
SelectRandomStim <- function(n){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample_n(tmp1$stimulus, n=n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1 & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample_n(tmp1$stimulus, n=n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1 & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample_n(tmp1, n=n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1$stimulus & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(n=10)
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
tmp1 <- random[batch == b & old_object_condition == 3]
View(tmp1)
SelectRandomStim <- function(nstim=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample(unique(tmp1_stimulus), n=nstim)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1$stimulus & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(nstim = 10)
SelectRandomStim <- function(nstim=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample(unique(tmp1_stimulus), nstim)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1$stimulus & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(nstim = 10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample(unique(tmp1$stimulus), n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1$stimulus & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(n = 10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample(unique(tmp1$stimulus), n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1 & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(n = 10)
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
tmp1 <- random[batch == b & old_object_condition == 3]
sel_tmp1 <- sample(unique(tmp1$stimulus), n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1 & old_object_condition %in% c(1,3)])
tmp1_stim <- unique(tmp1$stimulus)
tmp1
unique(tmp1$stimulus)
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_stim
sel_tmp1 <- sample(unique(tmp1$stimulus), n)
tmp = rbind(tmp, random[stimulus %in% sel_tmp1 & old_object_condition %in% c(1,3)])
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)])
}
return(tmp)
}
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], fill=TRUE)
}
return(tmp)
}
SelectRandomStim(n=10)
View(SelectRandomStim(n=10))
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], fill=T, use.names=F)
}
return(tmp)
}
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], use.names=F)
}
return(tmp)
}
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random), colnames = names(random)))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], fill=T)
}
return(tmp)
}
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random), dimnames = c(,names(random))))
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], fill=T)
}
return(tmp)
}
SelectRandomStim(n=10)
SelectRandomStim <- function(n=10){
# for each batch's 3x viewed list of stim, sample_n a specific amount
# then, select the rows where that stim is seen AND it's either in the 3x or 1x viewed condition
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
names(tmp) = names(random)
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], fill=T)
}
return(tmp)
}
SelectRandomStim(n=10)
View(SelectRandomStim(n=10))
random10_cohensd =
random10_cohensd = SelectRandomStim(n=10)[, .(mean = mean(correct)),
by = .(participant, old_object_condition)]
View(random10_cohensd)
tmp <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
tmp <- separate(data = tmp,
col = number, sep = ".",
into = c("number", "jpg"))
software = retrieval[condition == "software"]
software[, HR := mean(correct), by = participant]
software[, avg_mem := correct - HR, by = participant]
tmp <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
tmp <- separate(data = tmp,
col = number, sep = ".",
into = c("number", "jpg"))
tmp <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
View(tmp)
tmp <- separate(data = tmp,
col = number, sep = ".",
into = c("number", "jpg"))
tmp <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
tmp <- separate(data = tmp,
col = number, sep = ".jpg",
into = c("number", "jpg"))
View(tmp)
tmp <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
tmp <- separate(data = tmp,
col = number, sep = ".jpg",
into = c("number"))
View(tmp)
View(tmp[number %in% c(1, 50) & old_object_condition %in% c(1,3,".")]
)
tmp[number %in% c(1:50) & old_object_condition %in% c(1,3,".")]
View(tmp[number %in% c(1:50) & old_object_condition %in% c(1,3,".")]
)
stimulus50 = tmp_software[number %in% c(1:50) & old_object_condition %in% c(1,3,".")]
tmp_software <- separate(data = software,
col = stimulus, sep = 1,
into = c("letter", "number"))
tmp_software <- separate(data = tmp,
col = number, sep = ".jpg",
into = c("number", "jpg"))
stimulus50 = tmp_software[number %in% c(1:50) & old_object_condition %in% c(1,3,".")]
# re-form the stimulus column
software50$stimulus = with(software50, paste0(letter, number, ".jpg"))
tmp_software
View(tmp_software)
stimulus50 = tmp_software[number %in% c(1:50) & old_object_condition %in% c(1,3,".")]
# re-form the stimulus column
software50$stimulus = with(software50, paste0(letter, number))
# re-form the stimulus column
software50$stimulus = with(software50, paste0(letter, number))
with(software50, paste0(letter, number))
stimulus50
software50
software50 = tmp_software[number %in% c(1:50) & old_object_condition %in% c(1,3,".")]
# re-form the stimulus column
software50$stimulus = with(software50, paste0(letter, number, ".jpg"))
View(software50)
RandomSelectionEffectSize <- function(n_stim = 10, n_iter = 100){
effect_table_random <- c()
# simulate many times
for(i in 1:n_iter){
# get mean accuracy for 10 random stimuli
tmp = SelectRandomStim(n=n_stim)[, .(mean = mean(correct)),
by = .(participant, old_object_condition)]
# if they don't have a value for all 3 conditions, a paired samples effect size will not work
goodparticipants = tmp[, .N, by=participant]
goodparticipants = goodparticipants[N == 3,]$participant
tmp = tmp[participant %in% goodparticipants]
# find effect size
ef = cohen.d(tmp[old_object_condition == 3]$mean,
tmp[old_object_condition == 1]$mean,
paired = T)
effect_table_random <- c(effect_table_random, ef$estimate)
}
return(effect_table_random)
}
random10_cohensd_HR = RandomSelectionEffectSize(num_stim = 10, num_iter = 100)
random10_cohensd_HR = RandomSelectionEffectSize(n_stim = 10, n_iter = 100)
View(tmp)
# TODO: I made this into a function later on due to later analyses; Need to change inner variables.
RandomSelectionEffectSize <- function(n_stim = 10, n_iter = 100){
effect_table_random <- c()
# simulate many times
for(i in 1:n_iter){
# get mean accuracy for 10 random stimuli
tmp = SelectRandomStim(n=n_stim)[, .(mean = mean(correct)),
by = .(participant, old_object_condition)]
# if they don't have a value for all 3 conditions, a paired samples effect size will not work
goodparticipants = tmp[, .N, by=participant]
goodparticipants = goodparticipants[N == 3,]$participant
tmp = tmp[participant %in% goodparticipants]
# find effect size
ef = cohen.d(tmp[old_object_condition == 3]$mean,
tmp[old_object_condition == 1]$mean, paired = T)
effect_table_random <- c(effect_table_random, ef$estimate)
}
return(effect_table_random)
}
random10_cohensd_HR = RandomSelectionEffectSize(n_stim = 10, n_iter = 100)
n_stim_list = seq(5,80,5)
length(n_stim_list)
3*2 - 1
CalculateDprime <- function(dt){
stats_by_participant = dcast(dt,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
stats_by_participant$V1 = NULL
names(stats_by_participant)[2:4] = c("FA", "HR_1", "HR_3") # rename to be more descriptive
stats_by_participant[, FA := 1-FA] # make FA column actually correspond to FA
stats_by_participant[FA==0, FA := 1/80][FA==1, FA := 1-(1/80)] # correct 0s and 1s
stats_by_participant[HR_1==0, HR_1 := 1/80][HR_1==1, HR_1 := 1-(1/80)]
stats_by_participant[HR_3==0, HR_3 := 1/80][HR_3==1, HR_3 := 1-(1/80)]
stats_by_participant[, dprime_1 := qnorm(HR_1) - qnorm(FA)]
stats_by_participant[, dprime_3 := qnorm(HR_3) - qnorm(FA)]
return(stats_by_participant)
}
random10 = SelectRandomStim(n=10)
CalculateDprime(random10)
stats_by_participant = dcast(random10,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
CalculateDprime(SelectRandomStim(n=10))
CalculateDprime <- function(dprime_table){
stats_by_participant = dcast(dprime_table,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
stats_by_participant$V1 = NULL
names(stats_by_participant)[2:4] = c("FA", "HR_1", "HR_3") # rename to be more descriptive
stats_by_participant[, FA := 1-FA] # make FA column actually correspond to FA
stats_by_participant[FA==0, FA := 1/80][FA==1, FA := 1-(1/80)] # correct 0s and 1s
stats_by_participant[HR_1==0, HR_1 := 1/80][HR_1==1, HR_1 := 1-(1/80)]
stats_by_participant[HR_3==0, HR_3 := 1/80][HR_3==1, HR_3 := 1-(1/80)]
stats_by_participant[, dprime_1 := qnorm(HR_1) - qnorm(FA)]
stats_by_participant[, dprime_3 := qnorm(HR_3) - qnorm(FA)]
return(stats_by_participant)
}
random10 = SelectRandomStim(n=10)
CalculateDprime(random10)
CalculateDprime
CalculateDprime <- function(dprime_table){
stats_by_participant = dcast(dprime_table,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
stats_by_participant$V1 = NULL
names(stats_by_participant)[2:4] = c("FA", "HR_1", "HR_3") # rename to be more descriptive
stats_by_participant[, FA := 1-FA] # make FA column actually correspond to FA
stats_by_participant[FA==0, FA := 1/80][FA==1, FA := 1-(1/80)] # correct 0s and 1s
stats_by_participant[HR_1==0, HR_1 := 1/80][HR_1==1, HR_1 := 1-(1/80)]
stats_by_participant[HR_3==0, HR_3 := 1/80][HR_3==1, HR_3 := 1-(1/80)]
stats_by_participant[, dprime_1 := qnorm(HR_1) - qnorm(FA)]
stats_by_participant[, dprime_3 := qnorm(HR_3) - qnorm(FA)]
return(stats_by_participant)
}
CalculateDprime <- function(stats_by_participant){
stats_by_participant$V1 = NULL
names(stats_by_participant)[2:4] = c("FA", "HR_1", "HR_3") # rename to be more descriptive
stats_by_participant[, FA := 1-FA] # make FA column actually correspond to FA
stats_by_participant[FA==0, FA := 1/80][FA==1, FA := 1-(1/80)] # correct 0s and 1s
stats_by_participant[HR_1==0, HR_1 := 1/80][HR_1==1, HR_1 := 1-(1/80)]
stats_by_participant[HR_3==0, HR_3 := 1/80][HR_3==1, HR_3 := 1-(1/80)]
stats_by_participant[, dprime_1 := qnorm(HR_1) - qnorm(FA)]
stats_by_participant[, dprime_3 := qnorm(HR_3) - qnorm(FA)]
return(stats_by_participant)
}
# calculate dprime
random10_dprime = dcast(random10,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
CalculateDprime(random10_dprime)
View(random10_dprime)
SelectRandomAll <- function(n=10){
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
names(tmp) = names(random)
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3,".")], fill=T)
}
return(tmp)
}
SelectRandomOld <- function(n=10){
tmp = as.data.table(matrix(nrow=0, ncol=ncol(random)))
names(tmp) = names(random)
for(b in 1:8){
tmp1 <- random[batch == b & old_object_condition == 3]
tmp1_stim <- as.vector(unique(tmp1$stimulus))
tmp1_sel <- sample(tmp1_stim, n)
# only grab if it was seen in the encoding phase?
tmp = rbind(tmp, random[stimulus %in% tmp1_sel & old_object_condition %in% c(1,3)], fill=T)
}
return(tmp)
}
CalculateDprime <- function(dprime_table){
stats_by_participant = dcast(dprime_table,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
stats_by_participant$V1 = NULL
names(stats_by_participant)[2:4] = c("FA", "HR_1", "HR_3") # rename to be more descriptive
stats_by_participant[, FA := 1-FA] # make FA column actually correspond to FA
stats_by_participant[FA==0, FA := 1/80][FA==1, FA := 1-(1/80)] # correct 0s and 1s
stats_by_participant[HR_1==0, HR_1 := 1/80][HR_1==1, HR_1 := 1-(1/80)]
stats_by_participant[HR_3==0, HR_3 := 1/80][HR_3==1, HR_3 := 1-(1/80)]
stats_by_participant[, dprime_1 := qnorm(HR_1) - qnorm(FA)]
stats_by_participant[, dprime_3 := qnorm(HR_3) - qnorm(FA)]
return(stats_by_participant)
}
CalculateDprime(random10)
random10 = SelectRandomAll(n=10)
CalculateDprime(random10)
CalculateDprime <- function(dprime_table){
stats_by_participant = dcast(dprime_table,
value.var = "correct",
participant ~ old_object_condition,
fill=0,
mean, na.rm=T)
# stats_by_participant$V1 = NULL
names(stats_by_participant)[2:4] = c("FA", "HR_1", "HR_3") # rename to be more descriptive
stats_by_participant[, FA := 1-FA] # make FA column actually correspond to FA
stats_by_participant[FA==0, FA := 1/80][FA==1, FA := 1-(1/80)] # correct 0s and 1s
stats_by_participant[HR_1==0, HR_1 := 1/80][HR_1==1, HR_1 := 1-(1/80)]
stats_by_participant[HR_3==0, HR_3 := 1/80][HR_3==1, HR_3 := 1-(1/80)]
stats_by_participant[, dprime_1 := qnorm(HR_1) - qnorm(FA)]
stats_by_participant[, dprime_3 := qnorm(HR_3) - qnorm(FA)]
return(stats_by_participant)
}
random10 = SelectRandomAll(n=10)
CalculateDprime(random10)
# Calculate dprime
software10_dprime = CalculateDprime(software10)
# grab the first 10 items of each software-allocated group
software10 <- tmp_software[number %in% c(1:10) & old_object_condition %in% c(1,3,".")]
# re-form the stimulus column
software10$stimulus = with(software10, paste0(letter, number, ".jpg"))
software10$letter = NULL
software10$number = NULL
software10$jpg = NULL
# Calculate dprime
software10_dprime = CalculateDprime(software10)
View(software10_dprime)
